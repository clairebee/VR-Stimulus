%=========================================================================%
%                            individual states are
%sessionStart
%prepareNextTrial
%run
%timeOut
%trialEnd
%enOfExperiment
%=========================================================================%

% prepareNextTrial
% initializes trial specific information such us initializing base
% information


function fhandle = prepareNextTrial(rigInfo, hwInfo,expInfo)
global TRIAL; % save trial specific info here
global TRIAL_COUNT; % necessary to keep track of TRIAL count and set it for next trial;
% global EXP;
global ROOM;
global OLD;
global SESSION_NAME;
global REPLAY;
global TRAJ;
global SAVE_COUNT
global rewStatus
global currTrial


currTrial = 1;
switch expInfo.EXP.trajDir
    case 'cw'
        TRAJ = expInfo.EXP.delta;
    case 'ccw'
        TRAJ = expInfo.EXP.l - expInfo.EXP.delta;
    otherwise 
        TRAJ = round(expInfo.EXP.a1/10);
end



TRIAL_COUNT = TRIAL_COUNT + 1;
SAVE_COUNT = 0;

info = [];

info.no = TRIAL_COUNT;
info.epoch = 0; %number of steps within a run loop
info.abort = 0;
info.start = -1; % it will be set at the beginning of run.m

TRIAL.info = info;
TRIAL.trialContr = NaN.*ones(1,expInfo.EXP.maxTraj);
TRIAL.trialStart = NaN.*ones(1,expInfo.EXP.maxTraj);
TRIAL.trialGain  = NaN.*ones(1,expInfo.EXP.maxTraj);
TRIAL.trialBlanks  = NaN.*ones(1,expInfo.EXP.maxTraj);
TRIAL.trialActive = 0.*ones(1,expInfo.EXP.maxTraj);
TRIAL.trialRewPos = 110.*ones(1,expInfo.EXP.maxTraj);
TRIAL.trialOutcome = NaN.*ones(1,expInfo.EXP.maxTraj);

TRIAL.trialActive(1) = expInfo.EXP.active(1);
TRIAL.trialRewPos(1) = expInfo.EXP.rew_pos(1);
TRIAL.trialStart(1) = 0;
TRIAL.trialGain(1)  = 1;
TRIAL.trialBlanks(1) = expInfo.EXP.pause_frames;

fprintf('PrepareNextTrial\n'); % debug
fprintf('*** trial %4d of %4d ***\n', TRIAL.info.no, expInfo.EXP.maxNTrials); % debug



TRIAL.posdata = zeros(expInfo.EXP.maxTraj, expInfo.EXP.maxTrialDuration*70,6,'double'); % x,y,z,theta,speed,inRoom
TRIAL.posdata(:,:,1) = 0;
TRIAL.traj      = zeros(expInfo.EXP.maxTraj, expInfo.EXP.maxTrialDuration*70,1,'double'); % 

TRIAL.pospars   = {'X','Y','Z','theta','speed','inRoom'};
TRIAL.time      = zeros(expInfo.EXP.maxTraj, expInfo.EXP.maxTrialDuration*70,'double');
TRIAL.balldata  = zeros(expInfo.EXP.maxTraj, expInfo.EXP.maxTrialDuration*70,5,'double');
TRIAL.lick      = zeros(expInfo.EXP.maxTraj, expInfo.EXP.maxTrialDuration*70,'double');


TRIAL.trialIdx = zeros(expInfo.EXP.maxTraj, expInfo.EXP.maxTrialDuration*70,'double'); %

% if ~REPLAY
    if expInfo.EXP.changeLength
        if expInfo.EXP.randScale
            roomLength = expInfo.EXP.lengthSet(randi(length(expInfo.EXP.lengthSet)));
        else
            idx = currTrial;
            if idx>length(expInfo.EXP.lengthSet)
                idx = rem(currTrial, length(expInfo.EXP.lengthSet));
                if idx==0
                    idx = length(expInfo.EXP.lengthSet);
                end
            end
            roomLength = expInfo.EXP.lengthSet(idx);
        end
    else
        roomLength = 1;
    end
    TRIAL.trialRL(currTrial) = roomLength;
% end

%% *** LOAD THE ROOM HERE ***
if ~expInfo.REPLAY
    ROOM = getRoomData(expInfo.EXP,TRIAL.trialRL(currTrial));
else
    ROOM = expInfo.OLD.ROOM;
end
%%

rewStatus = zeros(size(expInfo.EXP.rewCorners));
TRIAL.nCompTraj = 1; % number of completed trajectories

if expInfo.REPLAY
    TRIAL = expInfo.OLD.TRIAL;
    TRIAL.info.abort = 0;
    TRIAL.currTime = zeros(size(TRIAL.time));
    currTrial = 1;
    TRIAL.nCompTraj = 1;
end

rigInfo;
hwInfo;
expInfo;

fhandle =  @run;
return
end
